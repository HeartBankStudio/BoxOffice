pragma solidity ^0.4.24;

import "truffle/Assert.sol";
import "truffle/DeployedAddresses.sol";
import "../contracts/HeartBankToken.sol";
import "../contracts/BoxOffice.sol";

contract TestBoxOffice8 {

    BoxOffice boxOffice;
    uint public initialBalance = 1 ether;

    function beforeEach() public {
        HeartBankToken kiitos = new HeartBankToken();
        boxOffice = new BoxOffice(address(kiitos), DeployedAddresses.BoxOfficeOracle());
        Assert.isTrue(kiitos.addAdmin(address(boxOffice)), "should add admin");
        Assert.isTrue(boxOffice.makeFilm(now + 28 days, 1 finney, 1 ether, "title", "symbol", "logline", "ipfshash", "ipfshash"), "should make film");
    }

    function testGetWithdrawal() public {
        address recipient;
        uint amount;
        string memory expense;

        Assert.isTrue(boxOffice.buyTickets.value(3 finney)(0, 2), "should purchase tickets");
        Assert.isTrue(boxOffice.withdrawFund(0, address(this), 1 finney, "to pay screenwriter"), "should purchase tickets");
        (recipient, amount, expense) = boxOffice.getWithdrawal(0, 0);
        Assert.equal(recipient, address(this), "should store recipient");
        Assert.equal(amount, 1 finney, "should store amount");
        Assert.equal(expense, "to pay screenwriter", "should store expense");
    }

    function testGetBoxOfficeStats() public {
        uint totalReceipts;
        uint totalFilms;

        Assert.isTrue(boxOffice.buyTickets.value(3 finney)(0, 2), "should purchase tickets");
        (totalReceipts, totalFilms) = boxOffice.getBoxOfficeStats();
        Assert.equal(totalReceipts, boxOffice.convertToUsd(2 finney), "should return total receipts");
        Assert.equal(totalFilms, 1, "should return total films");
    }

    function testGetFilmStats() public {
        // uint price;
        uint audience;
        // uint withdraws;
        // uint ticketSupply;
        // uint ticketsAvailable;
        // uint ticketsSold;
        // uint filmMarketValue;
        // uint fundsCollected;
        // uint fundsWithdrawn;
        // uint fundBalance;

        ( , audience, , , , , , , , ) = boxOffice.getFilmStats(0);
        Assert.equal(audience, 0, "should return total audience members");
    }

    function testShutDownBoxOffice() public {
        Assert.isTrue(boxOffice.toggleEmergency(), "should toggle emergency state");
        Assert.isTrue(address(boxOffice).call(bytes4(keccak256("shutDownBoxOffice()"))), "should self-destruct");
    }

}